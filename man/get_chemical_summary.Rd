% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_chemical_summary.R
\name{get_chemical_summary}
\alias{get_chemical_summary}
\title{Create a chemical summary of the data.}
\usage{
get_chemical_summary(tox_list, ACClong = NULL, filtered_ep = "All",
  chem.data = NULL, chem.site = NULL, chem.info = NULL,
  exclusion = NULL)
}
\arguments{
\item{tox_list}{list with data frames for chem_data, chem_info, chem_site, 
and optionally exclusions and benchmarks. Created with \code{\link{create_toxEval}}}

\item{ACClong}{data frame with at least columns: CAS, chnm, endPoint, ACC_value. To use data
provided by this package from ToxCast, use the \code{\link{get_ACC}} function. You may wish}

\item{filtered_ep}{data frame with colums: endPoints, groupCol. Default is \code{"All"}, where no
filtering occurs.}

\item{chem.data}{OPTIONAL data frame with (at least) columns: CAS, SiteID, Value. Default is \code{NULL}. 
Will over-ride what is in tox_list.}

\item{chem.site}{OPTIONAL data frame with (at least) columns: SiteID, Short Name. Default is \code{NULL}. 
Will over-ride what is in tox_list.}

\item{chem.info}{OPTIONAL data frame with (at least) columns: CAS, class. Default is \code{NULL}. 
Will over-ride what is in tox_list.}

\item{exclusion}{OPTIONAL data frame with (at least) columns: CAS and endPoint. Default is \code{NULL}. 
Will over-ride what is in tox_list.}
}
\details{
To use the data provided by the package, a sample workflow is shown below
in the examples. It includes getting the ToxCast (ACC) values that will
be used to calculate the EAR, filtering out the endToints that should
be ignored based on "flags" in the data, and filtering out any groups
that may not be important to the analysis at hand.
}
\examples{
path_to_tox <-  system.file("extdata", package="toxEval")
file_name <- "OWC_data_fromSup.xlsx"
full_path <- file.path(path_to_tox, file_name)

tox_list <- create_toxEval(full_path)

ACClong <- get_ACC(tox_list$chem_info$CAS)
ACClong <- remove_flags(ACClong)

cleaned_ep <- clean_endPoint_info(endPointInfo)
filtered_ep <- filter_groups(cleaned_ep)

chemicalSummary <- get_chemical_summary(tox_list, ACClong, filtered_ep)
                                        
}
