% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hits_summary.R
\name{hits_summary_DT}
\alias{hits_summary_DT}
\alias{hits_summary}
\title{Summary of hits per site/category}
\usage{
hits_summary_DT(chemicalSummary, category = "Biological",
  mean_logic = FALSE, hit_threshold = 0.1)

hits_summary(chemicalSummary, category, hit_threshold = 0.1,
  mean_logic = FALSE)
}
\arguments{
\item{chemicalSummary}{data frame from \code{get_chemical_summary}}

\item{category}{either "Biological", "Chemical Class", or "Chemical"}

\item{mean_logic}{character. Options are "mean", "max", or "noSum". 
TRUE will default to "mean" and FALSE to "max". The default value is "mean". 
The most appropriate use of "noSum" is for non-ToxCast benchmarks. In this case
the values plotted are the overall max of the sample (not the max of the sum
of the sample).}

\item{hit_threshold}{numeric threshold defining a "hit"}
}
\value{
data frame with columns "Hits per Sample", "Individual Hits",
"nSample", "site", and "category"
}
\description{
These functions create a table with several rows per site depending on which 
categories get hits. A "hit" is based on a user specified hit_threshold. For example, 
if "Biological" is the category, and a site has hits above a threshold for 
"DNA Binding" and "Nuclear Receptors", that site will have 2 rows of data in this table.
}
\details{
For each row, there are 4 columns. Site and category (as defined by the category argument) 
define the row. "Hits per Sample" are how many samples at that site had hits (based on 
hit_threshold) for the category. "Number of Samples" is number of samples.

The tables show slightly different results for a single site. Instead of one row per 
site/category, there is one row per category.
}
\examples{
# This is the example workflow:
path_to_tox <-  system.file("extdata", package="toxEval")
file_name <- "OWC_data_fromSup.xlsx"

full_path <- file.path(path_to_tox, file_name)

tox_list <- create_toxEval(full_path)
\dontrun{
ACClong <- get_ACC(tox_list$chem_info$CAS)
ACClong <- remove_flags(ACClong)

cleaned_ep <- clean_endPoint_info(endPointInfo)
filtered_ep <- filter_groups(cleaned_ep)
chemicalSummary <- get_chemical_summary(tox_list, ACClong, filtered_ep)

stats_group <- hits_summary(chemicalSummary, "Biological")

hits_summary_DT(chemicalSummary, category = "Biological")
hits_summary_DT(chemicalSummary, category = "Chemical Class")
hits_summary_DT(chemicalSummary, category = "Chemical")
}
}
