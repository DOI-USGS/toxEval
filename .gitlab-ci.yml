workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH
    
stages:
  - build
  - check
  - test
  - end
  - deploy

variables:
  _R_CHECK_CRAN_INCOMING_: "false"
  _R_CHECK_SUGGESTS_ONLY: "false"
  _R_CHECK_FORCE_SUGGESTS_: "true"
  _R_CHECK_DONTTEST_EXAMPLES_: "false"
  R_PROFILE: "$R_HOME/etc/Rprofile.site"
  APT_CACHE: "$CI_PROJECT_DIR/ci/lib/apt-cache"
  CRAN: "https://rpkg.chs.usgs.gov/prod-cran/latest"
  R_LIBS_USER: "$CI_PROJECT_DIR/ci/lib"
  R_LIBS: "$CI_PROJECT_DIR/ci/lib"
  BUILD_LOGS_DIR: "$CI_PROJECT_DIR/ci/logs"
  NOT_CRAN: "true"
  PKG_PATH: "$CI_PROJECT_DIR/docs"
  CONNECT_API_KEY: $CONNECT_API_KEY
  CONNECT_SERVER: $CONNECT_SERVER
  PAGES_OUTDIR: "$CI_PROJECT_DIR/public"

build-image:
  stage: build
  image: ${DEVOPS_REGISTRY}usgs/docker:20
  services:
  - name: ${DEVOPS_REGISTRY}usgs/docker:20-dind
    alias: docker
  rules:
    - changes:
      - docker/Dockerfile
      - .gitlab-ci.yml
  script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin $CI_REGISTRY
    - docker pull ${CI_REGISTRY_IMAGE}:latest || true
    - cd docker
    - docker build
        --cache-from ${CI_REGISTRY_IMAGE}:latest
        -t ${CI_REGISTRY_IMAGE}:BUILD_${CI_COMMIT_SHORT_SHA}
        -t ${CI_REGISTRY_IMAGE}:latest
        .
    # If this is building a git tag, create the corresponding docker tag
    - if [ -n "${CI_COMMIT_TAG}" ]; then docker tag ${CI_REGISTRY_IMAGE}:BUILD_${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}; fi
    - docker push --all-tags ${CI_REGISTRY_IMAGE}


buildcheck:
  stage: check
  image: ${CI_REGISTRY_IMAGE}:latest
  dependencies:
    - build-image
  script:
    - R CMD build . --no-build-vignettes --no-manual
    - R -e 'devtools::check(document = FALSE, args = "--no-tests", error_on = "error", check_dir = Sys.getenv("BUILD_LOGS_DIR"))'
  artifacts:
    expire_in: 1 week
    paths:
      - $BUILD_LOGS_DIR

unittests:
  stage: test
  image: ${CI_REGISTRY_IMAGE}:latest
  dependencies:
    - build-image
    - buildcheck
  script:
    - R -e 'library(testthat); options(testthat.output_file = file.path(Sys.getenv("CI_PROJECT_DIR"), "test-out.xml")); devtools::test(reporter = "junit")'
  artifacts:
    when: always
    expire_in: 1 week
    paths: 
      - test-out.xml
    reports:
      junit: test-out.xml
        
covertests:
  stage: test
  image: ${CI_REGISTRY_IMAGE}:latest
  dependencies:
    - build-image
    - buildcheck
  script:
    - R -e 'x <- covr::package_coverage(); covr::to_cobertura(x); x; '
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml
    expire_in: 1 week
  coverage: '/Coverage: \d+.\d+\%/'

pages:
  stage: end
  image: ${CI_REGISTRY_IMAGE}:latest
  only: 
    - main
  script:
    - Rscript -e 'pkgdown::build_site(override = list(destination = "public"))'
    - Rscript -e 'source("deploy_simple.R")'
  artifacts:
    paths:
      - $PAGES_OUTDIR
    expire_in: 1 week
    
Validate Inventory:
    stage: end
    image: ${INTERNAL_REGISTRY}software/software-management:latest
    script:
      - software-management review
        --project "${CI_PROJECT_PATH}"
        --ref "${CI_COMMIT_BRANCH}"
        --type "provisional"
        --token "${GIT_TOKEN_CUSTOM}"
    tags:
        - chs-shared
